import sys
import joblib
import json
import numpy as np
import pandas as pd

# ðŸ”¹ Charger le modÃ¨le KMeans et le scaler
try:
    model = joblib.load('./kmeans.pkl')
    scaler = joblib.load('./kmeans_scaler.pkl')
except Exception as e:
    print(f"Error loading model or scaler: {str(e)}")
    sys.exit(1)

# ðŸ”¹ RÃ©cupÃ©rer les arguments envoyÃ©s depuis le backend Node.js
try:
    cpu = float(sys.argv[1])
    memory = float(sys.argv[2])
    nics = float(sys.argv[3])
    disks = float(sys.argv[4])
    in_use_mib = float(sys.argv[5])
    sockets = float(sys.argv[6])
    cores_per_socket = float(sys.argv[7])
    capacity_mib = float(sys.argv[8])
    provisioned_mib = float(sys.argv[9])
except Exception as e:
    print(f"Error parsing input arguments: {str(e)}")
    sys.exit(1)

# ðŸ”¹ Calcul des variables dÃ©rivÃ©es
used_memory_ratio = in_use_mib / provisioned_mib if provisioned_mib != 0 else 0
cpu_per_socket = cpu / sockets if sockets != 0 else 0
disk_usage_ratio = capacity_mib / provisioned_mib if provisioned_mib != 0 else 0

# ðŸ”¹ PrÃ©parer le vecteur dâ€™entrÃ©e avec des noms explicites (Ã©vite le warning)
feature_names = [
    'Memory', 'Provisioned_MiB', 'In_Use_MiB',
    'CPU_Count', 'CPU_Sockets', 'CPU_CoresPerSocket',
    'Capacity_MiB', 'Used_Memory_Ratio', 'CPU_per_Socket', 'Disk_Usage_Ratio'
]

input_df = pd.DataFrame([[
    memory, provisioned_mib, in_use_mib,
    cpu, sockets, cores_per_socket,
    capacity_mib, used_memory_ratio, cpu_per_socket, disk_usage_ratio
]], columns=feature_names)

# ðŸ”¹ Appliquer le scaler
try:
    scaled_input = scaler.transform(input_df)
except Exception as e:
    print(f"Scaling error: {str(e)}")
    sys.exit(1)

# ðŸ”¹ PrÃ©dire le cluster
try:
    cluster_label = int(model.predict(scaled_input)[0])
except Exception as e:
    print(f"Prediction error: {str(e)}")
    sys.exit(1)

# ðŸ”¹ Descriptions textuelles des clusters
cluster_descriptions = {
    0: "ðŸŸ¢ Cluster 0 ",
  
  1: "ðŸ”µ Cluster 1 ",
  
  2: "ðŸŸ¡ Cluster 2 "
}
# ðŸ”¹ PrÃ©parer la rÃ©ponse JSON
response = {
    "clusterLabel": cluster_label,
    "message": cluster_descriptions.get(cluster_label, "Cluster non reconnu.")
}

# ðŸ”¹ Retour vers Node.js
print(json.dumps(response))
